###############################################################################
#
# IAR C/C++ Compiler V2.10.4.157 for STM8                 19/Sep/2015  09:42:58
# Copyright 2010-2015 IAR Systems AB.
#
#    Source file  =  
#        D:\Data form C\SRT\PWM调光项目\STM8继电器工程\HAL\HAL_I2C_TSL2561.c
#    Command line =  
#        "D:\Data form C\SRT\PWM调光项目\STM8继电器工程\HAL\HAL_I2C_TSL2561.c"
#        -e --char_is_signed -On --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_cross_call --debug --code_model small
#        --data_model medium -o "D:\Data form
#        C\SRT\PWM调光项目\STM8继电器工程\Debug\Obj\" --dlib_config "D:\Program
#        Files\IAR Systems\Embedded Workbench 7.0\stm8\LIB\dlstm8smn.h" -D
#        STM8S103F3P -D USE_STM8_128_EVAL -lcN "D:\Data form
#        C\SRT\PWM调光项目\STM8继电器工程\Debug\List\" -lB "D:\Data form
#        C\SRT\PWM调光项目\STM8继电器工程\Debug\List\" -I "D:\Data form
#        C\SRT\PWM调光项目\STM8继电器工程\Libraries\STM8S_StdPeriph_Driver\inc\"
#        -I "D:\Data form C\SRT\PWM调光项目\STM8继电器工程\HAL\" -I "D:\Data
#        form C\SRT\PWM调光项目\STM8继电器工程\src\" --vregs 16
#    List file    =  
#        D:\Data form
#        C\SRT\PWM调光项目\STM8继电器工程\Debug\List\HAL_I2C_TSL2561.lst
#    Object file  =  
#        D:\Data form
#        C\SRT\PWM调光项目\STM8继电器工程\Debug\Obj\HAL_I2C_TSL2561.o
#
###############################################################################

D:\Data form C\SRT\PWM调光项目\STM8继电器工程\HAL\HAL_I2C_TSL2561.c
      1          /*
      2          ******************************************************************************
      3          HALI2C.C
      4          ******************************************************************************
      5          Hardware Abstraction Layer.
      6          ******************************************************************************
      7          (C) Copyright STMicroelectronics - 2004-
      8          ******************************************************************************
      9          
     10          Revision History (Latest modification on top)
     11          
     12          */
     13          
     14          /*
     15          ******************************************************************************
     16          Includes
     17          ******************************************************************************
     18          */
     19          #include "HAL_I2C_TSL2561.h"
     20          #include <string.h>
     21          						   	
     22          
     23          unsigned char ack = 1;
     24          u8	light_amp = 0;
     25          u8	light_cal_time = 2;
     26          
     27          //????;????????  
     28          //????:  
     29          //????:  
     30          /*******************************************************************************/   
     31          void TLS2561_write_sda_bit(unsigned char sda_data)   
     32          {   
     33          	if(sda_data==0)   
     34          	{ 
     35          		GPIO_WriteLow(TLS2561_SDA_PORT, TLS2561_SDA_PORT_NUM);
     36          	}   
     37          	else   
     38          	{   
     39          		GPIO_WriteHigh(TLS2561_SDA_PORT, TLS2561_SDA_PORT_NUM);
     40          	}   
     41          }   
     42          /*******************************************************************************  
     43          ????;????????  
     44          ????:  
     45          ????:  
     46          *******************************************************************************/   
     47          void TLS2561_write_scl_bit(unsigned char scl_data)   
     48          {   
     49          	if(scl_data==0)   
     50          	{ 
     51          		GPIO_WriteLow(TLS2561_SDA_PORT, TLS2561_SCL_PORT_NUM);
     52          	}   
     53          	else   
     54          	{   
     55          		GPIO_WriteHigh(TLS2561_SDA_PORT, TLS2561_SCL_PORT_NUM);
     56          	}   
     57          }   
     58          
     59          /*******************************************************************************  
     60          ????;??????  
     61          ????:  
     62          ????:  
     63          *******************************************************************************/   
     64          void TLS2561_start_bit(void)   
     65          {   
     66          	TLS2561_write_sda_bit(1);//?????    
     67          //	TLS2561_I2C_Delay(6);  
     68          	TLS2561_write_scl_bit(1);//?????    
     69          	TLS2561_I2C_Delay(6);   
     70          	TLS2561_write_sda_bit(0);//?????    
     71          	TLS2561_I2C_Delay(12);   
     72          	TLS2561_write_scl_bit(0);//?????    
     73          	TLS2561_I2C_Delay(6);   
     74          }   
     75          /*******************************************************************************  
     76          ????;??????  
     77          ????:  
     78          ????:  
     79          *******************************************************************************/   
     80          void TLS2561_stop_bit(void)   
     81          {   
     82          	TLS2561_write_sda_bit(0);//?????    
     83          //	TLS2561_I2C_Delay(6);  
     84          	TLS2561_write_scl_bit(1);//?????    
     85          	TLS2561_I2C_Delay(6);   
     86          	TLS2561_write_sda_bit(1);//?????    
     87          	TLS2561_I2C_Delay(6);   
     88          	TLS2561_write_scl_bit(0);
     89          	TLS2561_I2C_Delay(6); 
     90          }   
     91          
     92          
     93          /*******************************************************************************  
     94          ????;??????  
     95          ????:  
     96          	????:  
     97          *******************************************************************************/   
     98          u8 TLS2561_ack_recieve(void)   
     99          {   
    100          	u32 temp=0xffff;   
    101          	TLS2561_write_sda_bit(1);//?????    
    102          	TLS2561_write_scl_bit(1);   
    103          	TLS2561_I2C_Delay(3);   
    104          	PinDirConfig(DATAIN);
    105          
    106          	while(temp&&(GPIO_ReadInputPin(TLS2561_SDA_PORT, TLS2561_SDA_PORT_NUM)))   
    107          	{   
    108          		temp--;   
    109          	} 
    110          	PinDirConfig(DATAOUT);
    111          
    112          	TLS2561_write_scl_bit(0);   
    113          	TLS2561_I2C_Delay(3);   
    114          }   
    115          
    116          /*******************************************************************************  
    117          ????;?????  
    118          	????:  
    119          ????:  
    120          	*******************************************************************************/   
    121          void TLS2561_write_byte(u8 data)   
    122          {   
    123          	unsigned char temp;   
    124          
    125          	for(temp=8;temp>0;temp--)   
    126          	{   
    127          		
    128          		if((data&0x80)==0x80)   
    129          		{   
    130          			TLS2561_write_sda_bit(1);   
    131          		}   
    132          		else   
    133          		{   
    134          			TLS2561_write_sda_bit(0);   
    135          		}  
    136          		
    137          		TLS2561_I2C_Delay(6);   
    138          		TLS2561_write_scl_bit(1);   
    139          		TLS2561_I2C_Delay(6);  
    140          		TLS2561_write_scl_bit(0);   
    141          		data=data<<1;   
    142          	}  
    143          	TLS2561_I2C_Delay(6);  
    144          	TLS2561_write_sda_bit(1);   
    145          	TLS2561_I2C_Delay(6);  
    146          	TLS2561_write_scl_bit(1);  
    147          	PinDirConfig(DATAIN);
    148          	TLS2561_I2C_Delay(6);  
    149          	ack = (GPIO_ReadInputPin(TLS2561_SDA_PORT, TLS2561_SDA_PORT_NUM)) ;  	
    150          	TLS2561_I2C_Delay(6);  
    151          	PinDirConfig(DATAOUT);	
    152          	TLS2561_write_scl_bit(0);   
    153          	TLS2561_I2C_Delay(6);  	
    154          }   
    155          /*******************************************************************************  
    156          ????;?????  
    157          	????:  
    158          ????:  
    159          	*******************************************************************************/   
    160          u8 TLS2561_read_byte(void)   
    161          {   
    162          	unsigned char temp = 0;   
    163          	unsigned char ret_value = 0;   
    164          
    165          	TLS2561_write_sda_bit(1);   
    166          	TLS2561_I2C_Delay(6); 
    167          	PinDirConfig(DATAIN);
    168          	
    169          	for(temp=0;temp<8;temp++)   
    170          	{   
    171          		TLS2561_write_scl_bit(0);   
    172          		TLS2561_I2C_Delay(6);   
    173          		TLS2561_write_scl_bit(1);   
    174          		TLS2561_I2C_Delay(6);   
    175          		if(GPIO_ReadInputPin(TLS2561_SDA_PORT, TLS2561_SDA_PORT_NUM))   
    176          		{   
    177          			ret_value+=1;   
    178          		}   
    179          		else   
    180          		{   
    181          			ret_value+=0;   
    182          		}   
    183          	//	TLS2561_I2C_Delay(20);  
    184          		if(temp!=7)   
    185          		ret_value=ret_value<<1;   
    186          		TLS2561_write_scl_bit(0);   
    187          	}   
    188          	
    189          	PinDirConfig(DATAOUT);
    190          	TLS2561_I2C_Delay(6); 
    191          	TLS2561_write_sda_bit(1);   
    192          	TLS2561_I2C_Delay(6); 
    193          	TLS2561_write_scl_bit(1);   
    194          	TLS2561_I2C_Delay(6);   
    195          	TLS2561_write_scl_bit(0);   
    196          	TLS2561_I2C_Delay(6);  
    197          
    198          	return ret_value;
    199          }
    200          
    201          
    202          u8  TSL2561_Write(u8 command,u8 date) 
    203          {  
    204          	TLS2561_start_bit();   
    205          	TLS2561_write_byte(SLAVE_ADDR_WR);  
    206          	if(ack) return 1;  
    207          	TLS2561_write_byte(command);  
    208          	if(ack) return 1;  
    209          	TLS2561_write_byte(date);  
    210          	if(ack) return 1;
    211          	TLS2561_stop_bit(); 
    212          	return 0;
    213          } 
    214          u8 TSL2561_Read(u8 command, u8 *pDat)
    215          {   
    216          	u8 date;  
    217          	TLS2561_start_bit();   
    218          	TLS2561_write_byte(SLAVE_ADDR_WR);  
    219          	if(ack) return 1;  
    220          	TLS2561_write_byte(command);  
    221          	if(ack) return 1;  
    222          	TLS2561_start_bit();  
    223          	TLS2561_write_byte(SLAVE_ADDR_RD); 
    224          	if(ack) return 1;  
    225          	*pDat=TLS2561_read_byte(); 
    226          	TLS2561_stop_bit();  
    227          	return 0; 
    228          } 
    229          
    230          void set_cal_time_amp(u8 amp, u8 cal_time)
    231          {
    232          	if(amp==0)	//amp = 1
    233          	{
    234          		if(cal_time==0)  //13.7ms
    235          			TSL2561_Write(0x81, 0x0);	//  1  倍增益
    236          		else if(cal_time==1)  //101ms
    237          			TSL2561_Write(0x81, 0x1);	//  1  倍增益
    238          		else if(cal_time==2)  //402ms
    239          			TSL2561_Write(0x81, 0x2);	//  1  倍增益
    240          	}
    241          	else if(amp==1)
    242          	{
    243          		if(cal_time==0)  //13.7ms
    244          			TSL2561_Write(0x81, 0x10);	//  1  倍增益
    245          		else if(cal_time==1)  //101ms
    246          			TSL2561_Write(0x81, 0x11);	//  1  倍增益
    247          		else if(cal_time==2)  //402ms
    248          			TSL2561_Write(0x81, 0x12);	//  1  倍增益
    249          	}
    250          }
    251          
    252          void InitTSL2561(void)
    253          {
    254          	light_amp = 0;			// 1倍
    255          	light_cal_time = 2;		//402ms
    256          	TSL2561_Write( 0x80, 0x03);	//power on
    257          	set_cal_time_amp(light_amp,light_cal_time);	// 1增益
    258          }
    259          //读取光照强度
    260          void Read_Light(void) 
    261          {   
    262          	u8  DataLow0,DataHigh0,DataLow1,DataHigh1,commad,temp; 
    263          	u16 Channel0,Channel1;
    264          	TSL2561_Read(DATA0LOW,&DataLow0);  
    265          	TSL2561_Read(DATA0HIGH,&DataHigh0);  
    266          	Channel0 = 256*DataHigh0 + DataLow0;    
    267          	TSL2561_Read(DATA1LOW,&DataLow1);  
    268          	TSL2561_Read(DATA1HIGH,&DataHigh1);  
    269          	Channel1 = 256*DataHigh1 + DataLow1; 
    270          	
    271          } 
    272          
    273          //得到光照强度
    274          void get_lightlux(u16 *value)
    275          {
    276          	u8  DataLow0,DataHigh0,DataLow1,DataHigh1,commad,temp; 
    277          	u16 Channel0,Channel1;
    278          	
    279          	TSL2561_Read(DATA0LOW,&DataLow0);  
    280          	TSL2561_Read(DATA0HIGH,&DataHigh0);  
    281          	Channel0 = 256*DataHigh0 + DataLow0;    
    282          	TSL2561_Read(DATA1LOW,&DataLow1);  
    283          	TSL2561_Read(DATA1HIGH,&DataHigh1);  
    284          	Channel1 = 256*DataHigh1 + DataLow1; 
    285          
    286          		// Determine if either sensor saturated (0xFFFF)
    287          	// If so, abandon ship (calculation will not be accurate)
    288          	if ((Channel0 == 0xFFFF) || (Channel1 == 0xFFFF))
    289          	{
    290          		if(light_cal_time==2)
    291          			light_cal_time =1;
    292          		else if(light_cal_time == 1)
    293          			light_cal_time = 0;
    294          		set_cal_time_amp(light_amp,light_cal_time);	//16高增益
    295          		return;
    296          	}
    297          
    298          	*value = calculateLux(Channel0,Channel1);
    299          }
    300          
    301          uint32_t calculateLux(uint16_t ch0, uint16_t ch1)
    302          {
    303          	unsigned long chScale;
    304          	unsigned long channel1;
    305          	unsigned long channel0;
    306          
    307          	// find the ratio of the channel values (Channel1/Channel0)
    308          	unsigned long ratio1 ;
    309          	// round the ratio value
    310          	unsigned long ratio ;
    311          	unsigned int b, m;
    312          	unsigned long temp;
    313          	u32 lux ;
    314          	
    315          	switch (light_cal_time)
    316          	{
    317          		case 0:
    318          			chScale = TSL2561_LUX_CHSCALE_TINT0;
    319          		break;
    320          		case 1:
    321          			chScale = TSL2561_LUX_CHSCALE_TINT1;
    322          		break;
    323          		default: // No scaling ... integration time = 402ms
    324          			chScale = (1 << TSL2561_LUX_CHSCALE);
    325          		break;
    326          	}
    327          	  // Scale for gain (1x or 16x)
    328            	if (!light_amp) 
    329          		chScale = chScale << 4;
    330          
    331          	  // scale the channel values
    332          	channel0 = (ch0 * chScale) >> TSL2561_LUX_CHSCALE;
    333          	channel1 = (ch1 * chScale) >> TSL2561_LUX_CHSCALE;
    334          
    335          	if (channel0 != 0) 
    336          		ratio1 = (channel1 << (TSL2561_LUX_RATIOSCALE+1)) / channel0;
    337          
    338          	ratio = (ratio1 + 1) >> 1;
    339          
    340          
    341          	if ((ratio >= 0) && (ratio <= TSL2561_LUX_K1T))
    342          	{
    343          		b=TSL2561_LUX_B1T; 
    344          		m=TSL2561_LUX_M1T;
    345          	}
    346          	else if (ratio <= TSL2561_LUX_K2T)
    347          	{
    348          		b=TSL2561_LUX_B2T; 
    349          		m=TSL2561_LUX_M2T;
    350          	}
    351          	else if (ratio <= TSL2561_LUX_K3T)
    352          	{
    353          		b=TSL2561_LUX_B3T; 
    354          		m=TSL2561_LUX_M3T;
    355          	}
    356          	else if (ratio <= TSL2561_LUX_K4T)
    357          	{
    358          		b=TSL2561_LUX_B4T; 
    359          		m=TSL2561_LUX_M4T;
    360          	}
    361          	else if (ratio <= TSL2561_LUX_K5T)
    362          	{
    363          		b=TSL2561_LUX_B5T; 
    364          		m=TSL2561_LUX_M5T;
    365          	}
    366          	else if (ratio <= TSL2561_LUX_K6T)
    367          	{
    368          		b=TSL2561_LUX_B6T; 
    369          		m=TSL2561_LUX_M6T;
    370          	}
    371          	else if (ratio <= TSL2561_LUX_K7T)
    372          	{
    373          		b=TSL2561_LUX_B7T; 
    374          		m=TSL2561_LUX_M7T;
    375          	}
    376          	else if (ratio > TSL2561_LUX_K8T)
    377          	{
    378          		b=TSL2561_LUX_B8T; 
    379          		m=TSL2561_LUX_M8T;
    380          	}
    381          
    382          	temp = ((channel0 * b) - (channel1 * m));
    383          
    384          	// do not allow negative lux value
    385          	if (temp < 0) 
    386          		temp = 0;
    387          
    388          	// round lsb (2^(LUX_SCALE-1))
    389          	temp += (1 << (TSL2561_LUX_LUXSCALE-1));
    390          
    391          	// strip off fractional portion
    392          	lux = (temp >> TSL2561_LUX_LUXSCALE);
    393          
    394          	// Signal I2C had no errors
    395          	return lux;  
    396          }
    397          
    398          /****************************************************************************
    399          * 函  数：void DS18B20PinDirConfig(uint8_t dir);
    400          * 功  能：DS18B20数据引脚方向配置
    401          * 参  数：uint8_t dir(DATAIN , DATAOUT)
    402          * 返回值：无
    403          * 更  新：无
    404          * 备  注：无
    405          ****************************************************************************/
    406          void PinDirConfig(uint8_t dir)
    407          {
    408          	switch(dir)
    409          	{
    410          		case DATAIN :
    411          			GPIO_Init(GPIOB, (GPIO_Pin_TypeDef)(GPIO_PIN_5), GPIO_MODE_IN_FL_NO_IT);
    412          		break;
    413          		case DATAOUT :
    414          			GPIO_Init(GPIOB, (GPIO_Pin_TypeDef)(GPIO_PIN_5), GPIO_MODE_OUT_PP_HIGH_FAST);
    415          		break;
    416          		
    417          		default:
    418          		break;
    419          	}
    420          }
    421          
    422          
    423          //延时1 uS
    424          void TLS2561_I2C_Delay(u32 nCount)   
    425          {   
    426          	u16 temp_counter = 0;
    427          	for(; nCount != 0; nCount--)
    428          	{
    429          		for(temp_counter=0;temp_counter<2;temp_counter++)
    430          		{
    431          			;
    432          		}
    433          	}   
    434          }   
    435          
    436          
    437          
    438          
    439          
    440          

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      29  InitTSL2561
      45  PinDirConfig
     106  Read_Light
      35  TLS2561_I2C_Delay
      88  TLS2561_ack_recieve
     178  TLS2561_read_byte
      52  TLS2561_start_bit
      52  TLS2561_stop_bit
     168  TLS2561_write_byte
      31  TLS2561_write_scl_bit
      31  TLS2561_write_sda_bit
      80  TSL2561_Read
      66  TSL2561_Write
       1  ack
     450  calculateLux
     175  get_lightlux
       1  light_amp
       1  light_cal_time
     115  set_cal_time_amp

 
     1 byte  in section .near.bss
     2 bytes in section .near.data
 1 701 bytes in section .near_func.text
 
 1 701 bytes of CODE memory
     3 bytes of DATA memory

Errors: none
Warnings: 10
