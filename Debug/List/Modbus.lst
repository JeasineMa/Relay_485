###############################################################################
#
# IAR C/C++ Compiler V2.10.4.157 for STM8                 19/Sep/2015  09:42:59
# Copyright 2010-2015 IAR Systems AB.
#
#    Source file  =  D:\Data form C\SRT\PWM调光项目\STM8继电器工程\HAL\Modbus.c
#    Command line =  
#        "D:\Data form C\SRT\PWM调光项目\STM8继电器工程\HAL\Modbus.c" -e
#        --char_is_signed -On --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_cross_call --debug --code_model small --data_model
#        medium -o "D:\Data form C\SRT\PWM调光项目\STM8继电器工程\Debug\Obj\"
#        --dlib_config "D:\Program Files\IAR Systems\Embedded Workbench
#        7.0\stm8\LIB\dlstm8smn.h" -D STM8S103F3P -D USE_STM8_128_EVAL -lcN
#        "D:\Data form C\SRT\PWM调光项目\STM8继电器工程\Debug\List\" -lB
#        "D:\Data form C\SRT\PWM调光项目\STM8继电器工程\Debug\List\" -I
#        "D:\Data form
#        C\SRT\PWM调光项目\STM8继电器工程\Libraries\STM8S_StdPeriph_Driver\inc\"
#        -I "D:\Data form C\SRT\PWM调光项目\STM8继电器工程\HAL\" -I "D:\Data
#        form C\SRT\PWM调光项目\STM8继电器工程\src\" --vregs 16
#    List file    =  
#        D:\Data form C\SRT\PWM调光项目\STM8继电器工程\Debug\List\Modbus.lst
#    Object file  =  
#        D:\Data form C\SRT\PWM调光项目\STM8继电器工程\Debug\Obj\Modbus.o
#
###############################################################################

D:\Data form C\SRT\PWM调光项目\STM8继电器工程\HAL\Modbus.c
      1          
      2          #include "MODBUS.h"
      3          
      4          void bsp_ModbusRTUSlave_Tx(unsigned char *pt_send, u16 lenght);
      5          u16 cal_crc16(u8 *ptr,u16 len);		//CRC校验(16位)
      6          /*
      7          void modbus_set_buff();
      8          void modbus_put_buff();*/
      9          static void UART_clear_buf(void);
     10          void 		UART1_SendByte(u8 data);
     11          void 		UART1_SendString(u8* Data,u16 len);
     12          
     13          
     14          //u32 duty;
     15          
     16          u32 duty_receive;
     17          extern u8	sensor_id;
     18          
     19          extern u16	 optimal_light_strength;
     20          u8 HoldingReg_data[HOLDINGREG_DATA_SIZE]; //可读写寄存器 功能码：0x03  0x06  0x10 
     21          u16  src_crc, dst_crc;
     22          usart_def  usart1info,usart2info,usart3info;
     23          
     24          static const unsigned char  aucCRCHi[] = {
     25          	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     26          	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     27          	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     28          	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     29          	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     30          	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     31          	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     32          	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     33          	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     34          	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     35          	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     36          	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     37          	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     38          	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     39          	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     40          	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     41          	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
     42          	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
     43          	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     44          	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
     45          	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
     46          	0x00, 0xC1, 0x81, 0x40
     47          };
     48          
     49          static const unsigned char aucCRCLo[] = {
     50          	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
     51          	0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
     52          	0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
     53          	0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
     54          	0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
     55          	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
     56          	0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
     57          	0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 
     58          	0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
     59          	0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
     60          	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
     61          	0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
     62          	0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 
     63          	0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
     64          	0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
     65          	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
     66          	0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
     67          	0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
     68          	0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
     69          	0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
     70          	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
     71          	0x41, 0x81, 0x80, 0x40
     72          };
     73          
     74          void UART1_SendByte(u8 data)
     75          {
     76          	UART1_SendData8((unsigned char)data);
     77          	/* Loop until the end of transmission */
     78          	while (UART1_GetFlagStatus(UART1_FLAG_TXE) == RESET);
     79          }
     80          
     81          void UART1_SendString(u8* Data,u16 len)
     82          {
     83          	u16 i=0;
     84          	for(i=0;i<len;i++)
     85          		UART1_SendByte(Data[i]); 
     86          }
     87          
     88          
     89           void UART_clear_buf(void)
     90          {
     91          	u16 i;
     92          	usart1info.write = 0;
     93          	usart1info.Rx_delay_CNT = 0;
     94          	for(i = 0; i < USART_DATA_SIZE ; i++)
     95          		usart1info.data[i] =0xFF;
     96          }
     97          
     98          static u16 ModbusRTU_CRC(unsigned char *pucFrame, u16 usLen)
     99          {
    100          	unsigned char	ucCRCHi = 0xFF;
    101          	unsigned char	       ucCRCLo = 0xFF;
    102          	u16      iIndex = 0;
    103          
    104          	while( usLen-- )
    105          	{
    106          		iIndex = ucCRCHi ^ *( pucFrame++ );
    107          		ucCRCHi	 = (unsigned char)( ucCRCLo ^ aucCRCHi[iIndex] );
    108          		ucCRCLo = aucCRCLo[iIndex];
    109          	}
    110          
    111          	return (u16)( ucCRCHi << 8 | ucCRCLo );
    112          }
    113          //33 03 00 00 00 01 80 18 
    114          //  ID 1   CMD 1  address 2  quantity 2  CRC 2 
    115          static void ReadHoldingRegisters_Handle(void)
    116          {
    117          	unsigned char  i,byte_index;
    118          	u16	dat_CRC,dat_Quantity,dat_Address;
    119          	//u16 temp;
    120          
    121          	src_crc = ModbusRTU_CRC(usart1info.data,6); // 检验前六个字节    
    122          
    123          	dst_crc = usart1info.data[6] ;	
    124          	dst_crc =  (dst_crc<< 8 | usart1info.data[7]);
    125          	
    126          	//CRC添加到消息中时，低字节先加入，然后高字节。
    127          	if(src_crc ==dst_crc) 
    128          		usart1info.CRCerror = 0; //CRC校验正确
    129          	else 
    130          		usart1info.CRCerror = 1; //CRC校验出错
    131          		
    132          	if((usart1info.slaveID == sensor_id) && (usart1info.CRCerror == 0))//从机地址正确  CRC校验正确  接着往下处理
    133          	{
    134          		dat_Quantity = (u16)((usart1info.data[4] << 8 )| (usart1info.data[5])); 	//Quantity of Outputs 在消息中  高位在前  低位在后
    135          		if(dat_Quantity >= 0x01 && dat_Quantity <= 0x10)  		//0x0001 <= Quantity of Outputs <= 0x0010
    136          		{
    137          			dat_Address = (u16)((usart1info.data[2] << 8) | (usart1info.data[3])); //Address在消息中  高位在前  低位在后
    138          
    139          			if((dat_Address + dat_Quantity) <= HOLDINGREG_DATA_SIZE)  //Address 要在范围之内
    140          			{
    141          				byte_index = (unsigned char )dat_Quantity * 2;
    142          				
    143          				usart1info.send[0] = sensor_id;
    144          				usart1info.send[1] = usart1info.function;
    145          				usart1info.send[2] = byte_index; 
    146          
    147          				for(i = 0; i < byte_index; i++) //读取相应的寄存器的值
    148          				{
    149          					usart1info.send[i  + 3] = (unsigned char )(HoldingReg_data[dat_Address + i] );
    150          				}
    151          
    152          				dat_CRC = ModbusRTU_CRC(usart1info.send,byte_index + 3); 
    153          				usart1info.send[byte_index + 4] = (unsigned char )(dat_CRC & 0x00FF);
    154          				usart1info.send[byte_index + 3] = (unsigned char )(dat_CRC >> 8);
    155          				GPIO_WriteHigh(GPIOD,GPIO_PIN_4);
    156          				Delay(5);
    157          				bsp_ModbusRTUSlave_Tx(usart1info.send, byte_index + 5); //发送相应的消息给主机
    158                                
    159          				Delay(2500);
    160          			//	GPIO_WriteLow(GPIOD,GPIO_PIN_4);
    161          			}
    162          			
    163          			else 
    164          				usart1info.exceptionCode = 0x02; //错误类型：Address 不在范围之内
    165          		}
    166          		
    167          		else  
    168          			usart1info.exceptionCode = 0x03; //错误类型：Quantity of Outputs 不在范围之内
    169          	} 
    170          }
    171          
    172          
    173          
    174          static void WriteSingleRegister_Handle(void)
    175          {
    176          	unsigned char i;
    177          	u16 dat_Value,dat_Address;
    178          //        u16 dat_CRC;
    179          	
    180          	src_crc = ModbusRTU_CRC(usart1info.data,6); // 检验前六个字节    
    181          	dst_crc = usart1info.data[6] ;	
    182          	dst_crc =  (dst_crc<< 8 | usart1info.data[7]);
    183          	
    184          	//CRC添加到消息中时，低字节先加入，然后高字节。
    185          	if(src_crc ==dst_crc) 
    186          		usart1info.CRCerror = 0; //CRC校验正确
    187          	else
    188          		usart1info.CRCerror = 1; //CRC校验出错
    189          
    190          	if((usart1info.slaveID == sensor_id) && (usart1info.CRCerror == 0))//从机地址正确  CRC校验正确  接着往下处理
    191          	{
    192          		dat_Value = (u16)(usart1info.data[4] << 8 | usart1info.data[5]); //Register Value 在消息中  高位在前  低位在后
    193          		dat_Address = (u16)(usart1info.data[2] << 8 | usart1info.data[3]); //Address在消息中  高位在前  低位在后
    194          		
    195          		if(dat_Address < HOLDINGREG_DATA_SIZE)  //Address 要在范围之内
    196          		{
    197          			HoldingReg_data[dat_Address] = dat_Value; //将相应的值写入寄存器
    198          
    199          			for(i = 0; i < 8; i++) 
    200          				usart1info.send[i] = usart1info.data[i]; //将接收到的消息直接反馈给主机
    201          			GPIO_WriteHigh(GPIOD,GPIO_PIN_4);
    202          			Delay(2);
    203          			bsp_ModbusRTUSlave_Tx(usart1info.send, 8); //发送相应的消息给主机
    204          			Delay(4);
    205          			//GPIO_WriteLow(GPIOD,GPIO_PIN_4);
    206          			//modbus_set_buff();
    207          		}
    208          		else 
    209          			usart1info.exceptionCode = 0x02; //错误类型：Address 不在范围之内
    210          	} 
    211          }
    212          
    213          
    214          static void WriteMultipleregisters_Handle(void)
    215          {
    216          	unsigned char  i;
    217          	u16 dat_CRC,dat_Address,dat_Quantity;
    218          
    219          	src_crc = ModbusRTU_CRC(usart1info.data, usart1info.data[6] + 7); // 检验前N个字节 
    220          	dst_crc = usart1info.data[6] ;	
    221          	dst_crc =  (dst_crc<< 8 | usart1info.data[7]);
    222          	
    223          	//CRC添加到消息中时，低字节先加入，然后高字节。
    224          	if(src_crc ==dst_crc) 
    225          		usart1info.CRCerror = 0; //CRC校验正确
    226          	else                                                         
    227          		usart1info.CRCerror = 1; //CRC校验出错
    228          
    229          	if((usart1info.slaveID == sensor_id) && (usart1info.CRCerror == 0))//从机地址正确  CRC校验正确  接着往下处理
    230          	{
    231          		dat_Quantity = (u16)(usart1info.data[4] << 8 | usart1info.data[5]); //Quantity of Outputs 在消息中  高位在前  低位在后
    232          		
    233          		if(dat_Quantity >= 0x0001 && dat_Quantity <= 0x007B && usart1info.data[6] == (dat_Quantity * 2))  //0x0001 <= Quantity of Outputs <= 0x007B
    234          		{
    235          			dat_Address = (u16)(usart1info.data[2] << 8 | usart1info.data[3]); //Address在消息中  高位在前  低位在后
    236          			
    237          			if((dat_Address + dat_Quantity) <= HOLDINGREG_DATA_SIZE)  //Address 要在范围之内
    238          			{
    239          				for(i = 0; i < dat_Quantity; i++) //写入相应的寄存器的值
    240          				{
    241          					HoldingReg_data[dat_Address + i] = (u16)(usart1info.data[i * 2 + 7] << 8 | usart1info.data[i * 2 + 8]);
    242          				}
    243          
    244          				for(i = 0; i < 6; i++) 
    245          					usart1info.send[i] = usart1info.data[i]; //将接收到的消息的前一部分+CRC反馈给主机
    246          					
    247          				dat_CRC = ModbusRTU_CRC(usart1info.send,6); 
    248          				
    249          				usart1info.send[6] = (unsigned char)(dat_CRC & 0x00FF);
    250          				usart1info.send[7] = (unsigned char)(dat_CRC >> 8);
    251          				GPIO_WriteHigh(GPIOD,GPIO_PIN_4);
    252          				Delay(2);
    253          				bsp_ModbusRTUSlave_Tx(usart1info.send, 8); //发送相应的消息给主机 
    254          				Delay(4);
    255          			//	GPIO_WriteLow(GPIOD,GPIO_PIN_4);
    256          				//modbus_set_buff();
    257          			}
    258          			else usart1info.exceptionCode = 0x02; //错误类型：Address 不在范围之内
    259          		}
    260          		else  usart1info.exceptionCode = 0x03; //错误类型：Quantity of Outputs 不在范围之内
    261          	}
    262          }
    263          
    264          
    265          void bsp_ModbusRTUSlave_Tx(unsigned char *pt_send, u16 lenght)
    266          {
    267              //u16 i; 
    268              
    269              UART1_SendString(pt_send,lenght);
    270          }
    271          
    272          
    273          // 01 03 00 00 00 02 c4 0b 
    274          void bsp_ModbusRTUSlave_decode(void)
    275          { 
    276          	u16 dat_buff;
    277          
    278          	if(usart1info.write > 0 && usart1info.Rx_delay_CNT > 4)//缓冲区接收到数据  延时200ms再处理
    279          	{ 
    280          		usart1info.slaveID = usart1info.data[0];
    281          		usart1info.function = usart1info.data[1];
    282          		usart1info.exceptionCode = 0x00; // 错误类型清零
    283          		
    284          		switch(usart1info.function)
    285          		{
    286                              
    287          			//case 0x01:ReadCoils_Handle();break;  //Read Coils 这种"位"是可读写的，在PLC中为可读写的线圈，如数字量输出、中间继电器等
    288          			//case 0x02:ReadDiscreteInputs_Handle();break;  //Read Discrete Inputs 这种"位"是只读的，不能进行写操作，在PLC中为只读的线圈，如数字量输入
    289          			case 0x03:
    290          				ReadHoldingRegisters_Handle();
    291          				break;  //Read Holding Registers  这种寄存器可读写  0x0001 <= Quantity of Registers <= 0x007D
    292          			//case 0x04:ReadInputRegisters_Handle();break;  //Read Input Registers    这种寄存器只能读，不能写
    293          			//case 0x05:WriteSingleCoil_Handle();break;  //Write Single Coil
    294          			case 0x06:
    295          				WriteSingleRegister_Handle();
    296          				break;  //Write Single Register
    297          			//case 0x0F:WriteMultipleCoils_Handle();break;  //Write Multiple Coils 
    298          			case 0x10:
    299          				WriteMultipleregisters_Handle();
    300          				break;  //Write Multiple registers   0x0001 <= Quantity of Registers <= 0x007B
    301          			default : 
    302          				break; //usart1info.exceptionCode = 0x01;注释掉了，用不着，而且还会有误判的情况，错误类型：功能号不支持
    303          		}
    304          		//发送故障信息给主机
    305          		if(usart1info.exceptionCode != 0 && usart1info.slaveID == sensor_id)
    306          		{
    307          			usart1info.send[0] = sensor_id;
    308          			usart1info.send[1] = usart1info.function | 0x80;//function + 0x80
    309          			usart1info.send[2] = usart1info.exceptionCode;
    310          
    311          			dat_buff = ModbusRTU_CRC(usart1info.send,3);
    312          
    313          			usart1info.send[3] = (unsigned char )(dat_buff & 0x00FF);
    314          			usart1info.send[4] = (unsigned char )(dat_buff >> 8);
    315          			GPIO_WriteHigh(GPIOD,GPIO_PIN_4);
    316          			Delay(2);
    317          			bsp_ModbusRTUSlave_Tx(usart1info.send, 5); //发送相应的消息给主机
    318          			Delay(4);
    319          			GPIO_WriteLow(GPIOD,GPIO_PIN_4);
    320          		}
    321          
    322          		UART_clear_buf();
    323                          usart1info.write = 0;
    324                          usart1info.Rx_delay_CNT = 0;
    325          	}
    326          }
    327          /*
    328          void modbus_set_buff()
    329          {
    330          
    331          }
    332          
    333          //将数据放入modbuf   里面
    334          void modbus_put_buff()
    335          {
    336          	unsigned int num;
    337          	memset(HoldingReg_data,0,HOLDINGREG_DATA_SIZE);
    338          	HoldingReg_data[0] = optimal_light_strength>>8;
    339          	HoldingReg_data[1] = optimal_light_strength&0xff;
    340          }
    341          */
    342          

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      36  HoldingReg_data
      84  ModbusRTU_CRC
     337  ReadHoldingRegisters_Handle
      24  UART1_SendByte
      44  UART1_SendString
      30  UART_clear_buf
     355  WriteMultipleregisters_Handle
     239  WriteSingleRegister_Handle
     256  aucCRCHi
     256  aucCRCLo
      19  bsp_ModbusRTUSlave_Tx
     183  bsp_ModbusRTUSlave_decode
       2  dst_crc
       4  duty_receive
       2  src_crc
      50  usart1info
      50  usart2info
      50  usart3info

 
   194 bytes in section .near.bss
   512 bytes in section .near.rodata
 1 315 bytes in section .near_func.text
 
 1 315 bytes of CODE  memory
   512 bytes of CONST memory
   194 bytes of DATA  memory

Errors: none
Warnings: 4
