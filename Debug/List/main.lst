###############################################################################
#
# IAR C/C++ Compiler V2.10.4.157 for STM8                 19/Sep/2015  09:47:04
# Copyright 2010-2015 IAR Systems AB.
#
#    Source file  =  D:\Data form C\SRT\PWM调光项目\STM8继电器工程\src\main.c
#    Command line =  
#        "D:\Data form C\SRT\PWM调光项目\STM8继电器工程\src\main.c" -e
#        --char_is_signed -On --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_cross_call --debug --code_model small --data_model
#        medium -o "D:\Data form C\SRT\PWM调光项目\STM8继电器工程\Debug\Obj\"
#        --dlib_config "D:\Program Files\IAR Systems\Embedded Workbench
#        7.0\stm8\LIB\dlstm8smn.h" -D STM8S103F3P -D USE_STM8_128_EVAL -lcN
#        "D:\Data form C\SRT\PWM调光项目\STM8继电器工程\Debug\List\" -lB
#        "D:\Data form C\SRT\PWM调光项目\STM8继电器工程\Debug\List\" -I
#        "D:\Data form
#        C\SRT\PWM调光项目\STM8继电器工程\Libraries\STM8S_StdPeriph_Driver\inc\"
#        -I "D:\Data form C\SRT\PWM调光项目\STM8继电器工程\HAL\" -I "D:\Data
#        form C\SRT\PWM调光项目\STM8继电器工程\src\" --vregs 16
#    List file    =  
#        D:\Data form C\SRT\PWM调光项目\STM8继电器工程\Debug\List\main.lst
#    Object file  =  
#        D:\Data form C\SRT\PWM调光项目\STM8继电器工程\Debug\Obj\main.o
#
###############################################################################

D:\Data form C\SRT\PWM调光项目\STM8继电器工程\src\main.c
      1          /**
      2            ******************************************************************************
      3            * @file    Project/main.c 
      4            * @author  MCD Application Team
      5            * @version V2.1.0
      6            * @date    18-November-2011
      7            * @brief   Main program body
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */ 
     21          
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "stm8s.h"
     25          #include "stm8s_uart1.h"
     26          #include "stm8s_clk.h"
     27          #include "stm8s_flash.h"
     28          
     29          #include "HAL_I2C_TSL2561.h"
     30          #include "Modbus.h"
     31          
     32          /* Private defines -----------------------------------------------------------*/
     33          /* Private function prototypes -----------------------------------------------*/
     34          /* Private functions ---------------------------------------------------------*/
     35          
     36          
     37          void      	RCC_INIT(void);
     38          void 		GPIO_INIT(void);
     39          void 		TIME1_INIT(void);
     40          void 		USART1_INIT(void);
     41          void 		TIME2_INIT(void);
     42          void            Delay(uint32_t nCount);
     43          
     44          void 		run_led(u8 sta);
     45          
     46          void           RS485_RSV(u8 port, u8 flag);
     47          
     48          
     49          u16	time_counter;
     50          u16     light_lux;
     51          
     52          u8      get_light_flag;
     53          
     54          u8      uart_counter;
     55          u8      uart_buf[10] = {0};
     56          u8      uart_revflag;
     57          u16	uart_time_counter;
     58          u8	sensor_id;
     59          extern u8 HoldingReg_data[HOLDINGREG_DATA_SIZE];
     60          
     61          //   235   5V    10   0V
     62          
     63          
     64          void main(void)
     65          {
     66            /* Infinite loop */
     67          	RCC_INIT();
     68          	GPIO_INIT();
     69          	//TIME1_INIT();
     70          	//USART1_INIT();
     71          	//TIME2_INIT();
     72          	//InitTSL2561();
     73                  sensor_id = 0x02;
     74          	
     75          	get_light_flag = 0;
     76          	time_counter =0;
     77                  
     78                  while(1)
     79                  {
     80                    GPIO_WriteHigh(GPIOD,GPIO_PIN_2);
     81                    GPIO_WriteHigh(GPIOD,GPIO_PIN_3);
     82                    GPIO_WriteHigh(GPIOA,GPIO_PIN_3);
     83                    Delay(1000000);
     84              
     85                    GPIO_WriteLow(GPIOD,GPIO_PIN_3);
     86                    GPIO_WriteLow(GPIOD,GPIO_PIN_2);
     87                    GPIO_WriteLow(GPIOA,GPIO_PIN_3);
     88                    Delay(1000000);
     89          
     90                  }
     91          
     92          
     93          //	enableInterrupts();
     94          //
     95          //	while (1)
     96          //	{
     97          //           GPIO_WriteLow(GPIOD,GPIO_PIN_4);
     98          //              if(get_light_flag==1)
     99          //              {
    100          //                      disableInterrupts();
    101          //                      get_lightlux(&light_lux);
    102          //                      //enableInterrupts();
    103          //                      get_light_flag = 0;
    104          //                      HoldingReg_data[0] = light_lux>>8;
    105          //                      HoldingReg_data[1] = light_lux&0XFF;   
    106          //                      time_counter = 0;
    107          //              }		
    108          //              bsp_ModbusRTUSlave_decode();
    109          //              enableInterrupts();
    110          		
    111          //	}
    112          }
    113          
    114          //RS485 使能叫配置
    115          void RS485_RSV(u8 port, u8 flag)
    116          {
    117          	if(port == 1)
    118          	{
    119          		if(flag ==0)
    120          			GPIO_WriteLow(GPIOD,GPIO_PIN_4);	
    121          		else
    122          			GPIO_WriteHigh(GPIOD,GPIO_PIN_4);				
    123          			
    124          	}
    125          }
    126          
    127          
    128          void 	run_led(u8 sta)
    129          {
    130          	if(sta==1)
    131          		GPIO_WriteLow(GPIOA,GPIO_PIN_3);
    132          	else
    133          		GPIO_WriteHigh(GPIOA,GPIO_PIN_3);
    134          }
    135          
    136          
    137          
    138          
    139          void Delay(uint32_t nCount)
    140          {
    141          	/* Decrement nCount value */
    142                  //1000000时间适当
    143          	while (nCount != 0)
    144          	{       
    145          		nCount--;
    146          	}
    147          }
    148          
    149          //void Delay(uint32_t count)
    150          //{
    151          //        while(count--);
    152          //}
    153          
    154          
    155          
    156          
    157          void      RCC_INIT(void)
    158          {
    159          	 CLK->ICKR |= CLK_ICKR_HSIEN;
    160          //	CLK_HSICmd(ENABLE);
    161          	CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);
    162          	CLK_SYSCLKConfig(CLK_PRESCALER_HSIDIV1);
    163          //	CLK_PeripheralClockConfig(CLK_PERIPHERAL_UART1,ENABLE);  //串口1时钟开
    164          //	CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER1,ENABLE);  //定时器时钟1开	
    165          //	CLK_PeripheralClockConfig(CLK_PERIPHERAL_TIMER2,  ENABLE);  
    166          	CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_PERIPHERAL_UART1 & (uint8_t)0x0F));
    167          	CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_PERIPHERAL_TIMER1 & (uint8_t)0x0F));
    168          	CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_PERIPHERAL_TIMER2 & (uint8_t)0x0F));
    169          
    170          }
    171          
    172          void USART1_INIT(void)
    173          {
    174          //	UART1_DeInit();
    175          	UART1_Init(9600, UART1_WORDLENGTH_8D, UART1_STOPBITS_1,UART1_PARITY_NO,UART1_SYNCMODE_CLOCK_DISABLE, UART1_MODE_TXRX_ENABLE );  
    176          	UART1_ITConfig(UART1_IT_RXNE_OR, ENABLE);//UART1_IT_RXNE_OR    
    177          	UART1->CR1 &= (uint8_t)(~UART1_CR1_UARTD); 
    178          //	UART1_Cmd(ENABLE);  
    179          	UART1_ClearFlag(UART1_FLAG_RXNE);
    180          }
    181          
    182          
    183          void 	GPIO_INIT(void)
    184          {
    185          	GPIO_Init(GPIOD, (GPIO_Pin_TypeDef)(GPIO_PIN_4), GPIO_MODE_OUT_PP_LOW_FAST);
    186          	GPIO_Init(GPIOD, (GPIO_Pin_TypeDef)(GPIO_PIN_5), GPIO_MODE_OUT_PP_HIGH_FAST);
    187                  
    188                  GPIO_Init(GPIOD, (GPIO_Pin_TypeDef)(GPIO_PIN_2), GPIO_MODE_OUT_PP_HIGH_FAST);
    189                  GPIO_Init(GPIOD, (GPIO_Pin_TypeDef)(GPIO_PIN_3), GPIO_MODE_OUT_PP_HIGH_FAST);
    190                  
    191                  
    192          	GPIO_Init(GPIOD, (GPIO_Pin_TypeDef)(GPIO_PIN_6), GPIO_MODE_IN_FL_NO_IT);
    193          	
    194          	GPIO_Init(GPIOA, (GPIO_Pin_TypeDef)(GPIO_PIN_3), GPIO_MODE_OUT_PP_LOW_FAST);		//暂时不用中断方式
    195          	GPIO_Init(GPIOC, (GPIO_Pin_TypeDef)(GPIO_PIN_3), GPIO_MODE_OUT_PP_LOW_FAST);		//暂时不用中断方式
    196          
    197          	GPIO_Init(GPIOC, (GPIO_Pin_TypeDef)(GPIO_PIN_4), GPIO_MODE_OUT_PP_HIGH_FAST);
    198          	
    199          	GPIO_Init(GPIOB, (GPIO_Pin_TypeDef)(GPIO_PIN_4), GPIO_MODE_OUT_PP_HIGH_FAST);
    200          	GPIO_Init(GPIOB, (GPIO_Pin_TypeDef)(GPIO_PIN_5), GPIO_MODE_OUT_PP_HIGH_FAST);
    201          }
    202          
    203          
    204          /*******************************************************************************
    205          *                           ==定时器2初始化函数==
    206          * TIM2_DeInit();                                 --> 初始化定时器2寄存器
    207          * TIM2_TimeBaseInit(TIM2_PRESCALER_1, 224);      --> 定时器2基本初始化 设置 分频系数 , 初值
    208                                                            --> ( 无分频 , 7372800 / 32768 = 225 校准为224 )
    209          * TIM2_OC1Init(TIM2_OCMODE_PWM1 , TIM2_OUTPUTSTATE_ENABLE , 112 , TIM2_OCPOLARITY_HIGH);
    210                                                            --> 定时器2输出方式 为PWM1 , 定时器2输出状态使能 , 输出占空比 50% , 输出起始电平 为高
    211          * TIM2_Cmd(ENABLE);                              --> 启动定时器
    212          *******************************************************************************/
    213          void TIME2_INIT(void)
    214          {
    215          	//	TIM2_DeInit();
    216          	TIM2_TimeBaseInit(TIM2_PRESCALER_2, 1000);
    217          	TIM2_OC3Init(TIM2_OCMODE_PWM1 , 
    218          	TIM2_OUTPUTSTATE_ENABLE , 
    219          	0 , 
    220          	TIM2_OCPOLARITY_HIGH);
    221          	//	TIM2_OC3PreloadConfig(ENABLE);
    222          	//	TIM1_CtrlPWMOutputs(ENABLE);
    223          	TIM2->CCMR3 |= (uint8_t)TIM2_CCMR_OCxPE;
    224          	TIM1->BKR |= TIM1_BKR_MOE;
    225          	TIM2->CR1 |= (uint8_t)TIM2_CR1_CEN;
    226          	TIM2_Cmd(ENABLE);
    227          }	
    228          
    229          
    230          void TIME1_INIT()
    231          {
    232          //	TIM1_DeInit();
    233          
    234          	TIM1_TimeBaseInit(0,                    //预分频  		16 000 000   / (159 + 1)
    235          	TIM1_COUNTERMODE_UP,     //计数模式  
    236          	15999,                        //重装值  	1ms进入一次	
    237          	0x00);                     //重复计数N，计数N次后产生更新标志 
    238          	
    239          	TIM1_SetCounter(0);	//计数器初值设为0
    240          //	TIM1_ARRPreloadConfig(ENABLE);
    241          	TIM1->CR1 |= TIM1_CR1_ARPE;
    242          	TIM1_ITConfig(TIM1_IT_UPDATE, ENABLE);  
    243          //	TIM1_Cmd(ENABLE);
    244          	TIM1->CR1 |= TIM1_CR1_CEN;
    245          }
    246          
    247          
    248          
    249          
    250          
    251          
    252          /**
    253            * @brief Delay
    254            * @param nCount
    255            * @retval None
    256            */
    257          
    258          
    259          
    260          #ifdef USE_FULL_ASSERT
    261          
    262          /**
    263            * @brief  Reports the name of the source file and the source line number
    264            *   where the assert_param error has occurred.
    265            * @param file: pointer to the source file name
    266            * @param line: assert_param error line source number
    267            * @retval : None
    268            */
    269          void assert_failed(u8* file, u32 line)
    270          { 
    271            /* User can add his own implementation to report the file name and line number,
    272               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    273          
    274            /* Infinite loop */
    275            while (1)
    276            {
    277            }
    278          }
    279          #endif
    280          
    281          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  Delay
     119  GPIO_INIT
      26  RCC_INIT
      39  RS485_RSV
      33  TIME1_INIT
      38  TIME2_INIT
      43  USART1_INIT
       2  assert_failed
       1  get_light_flag
       2  light_lux
      94  main
      33  run_led
       1  sensor_id
       2  time_counter
      10  uart_buf
       1  uart_counter
       1  uart_revflag
       2  uart_time_counter

 
  20 bytes in section .near.bss
 447 bytes in section .near_func.text
 
 447 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
